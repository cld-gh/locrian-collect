"""
Test the scheduling of collecting data.
"""
import pytest

from locrian_collect.scheduler import scheduler, delta_time_to_sleep
from ..mock.utils import mock_func_return


class MockLogger:
    """Mock the logger"""
    def __init__(self):
        pass

    def info(self):
        """mock info call"""


class MockThread:
    """Mock Thread class."""
    def __init__(self, target):
        self.target = target

    def start(self):
        """Mock starting thread."""

    def join(self):
        """Mock joining thread."""


class MockTime:
    """Mock time namespace."""
    def __init__(self):
        self.num_called = 0

    def sleep(self, *args):
        """Mock sleep"""
        if self.num_called > 2:
            raise Exception('This is to break out of infinite loop in testing.')
        else:
            self.num_called += 1

    def time(self):
        """Mock current time."""
        return 1


def test_scheduler(monkeypatch):
    """Test scheduler success"""
    mock_logger = MockLogger()
    mock_time = MockTime()
    monkeypatch.setattr('locrian_collect.scheduler.logger_trades', mock_logger)
    monkeypatch.setattr('locrian_collect.scheduler.Thread', MockThread)
    monkeypatch.setattr('locrian_collect.scheduler.time', mock_time)
    with pytest.raises(Exception, match='This is to break out of infinite loop in testing.'):
        scheduler('trades')


def test_scheduler_to_many_requests(monkeypatch):
    """Test scheduler raises if request rate is too high."""
    mock_params_map = {'trades': {'managers': [None]*100,
                                  'time_between_requests': 1,
                                  'logger': None,
                                  'log_msg': None,
                                  'offset': None}}
    monkeypatch.setattr('locrian_collect.scheduler.PARAMS_MAP', mock_params_map)
    with pytest.raises(ValueError, match='Number of requests per second exceeds Okcoin.*'):
        scheduler('trades')


@pytest.mark.parametrize('interval, offset, expected', (
    [10, 0.1, 5.1],
    [2, 0.03, 1.03]
))
def test_delta_time_to_sleep(interval, offset, expected, monkeypatch):
    """Test the time to sleep is as expected."""
    monkeypatch.setattr('locrian_collect.scheduler.time.time', mock_func_return(12345))
    result = delta_time_to_sleep(interval, offset)
    assert result == expected



test_return = '{"asks":[[6696,0.02],[6683,0.03],[6647,0.02],[6621,0.02],[6599,0.02],[6589,0.03],[6561,0.02],[6527,0.02],[6503,0.02],[6483,0.02],[6457,0.02],[6431,0.02],[6412,0.02],[6391,0.02],[6367,0.02],[6341,0.02],[6316,0.02],[6297,0.02],[6276,0.02],[6247,0.02],[6226,0.02],[6207,0.02],[6181,0.02],[6156,0.02],[6137,0.02],[6127,0.02],[6111,0.02],[6100,0.01],[6091,0.02],[6066,0.02],[6047,0.02],[6006,0.02],[6000,0.01],[5981,0.02],[5957,0.02],[5933,0.01],[5913,0.02],[5900,0.01],[5893,0.02],[5867,0.02],[5847,0.01],[5833,0.02],[5811,0.02],[5800,0.01],[5787,0.02],[5768,0.01],[5751,0.02],[5748.2,125],[5725,0.02],[5700,0.01],[5696,0.02],[5677,0.01],[5655,0.01],[5649,0.01],[5629,0.01],[5605,0.01],[5600,0.01],[5599,0.01],[5580.78,125],[5500,0.02],[5425,0.02],[5418.24,125],[5400,0.01],[5399,0.01],[5350,0.01],[5300,0.01],[5299,0.01],[5260.43,125],[5229,0.01],[5200,0.02],[5155,0.01],[5125,0.01],[5102.61,125],[5100,0.01],[5000,0.506],[4995,0.4667],[4950,0.01],[4937.47,0.2011],[4906,0.01],[4900,0.01],[4850,0.01],[4849,0.01],[4800,0.21],[4799,0.067],[4750,0.01],[4735,0.01],[4730,0.01],[4725,0.01],[4720,0.01],[4715,0.01],[4710,0.01],[4705,0.01],[4700,0.5059],[4699,0.06],[4695,0.01],[4690,0.01],[4685,0.01],[4680,0.01],[4675,0.01],[4670,0.01],[4665,0.01],[4660,0.01],[4655,0.01],[4650,0.01],[4645,0.02],[4640,0.01],[4635,0.01],[4630,0.01],[4625,0.03],[4620,0.01],[4615,0.01],[4610,0.01],[4605,0.01],[4602,0.01],[4600,0.03],[4599,0.05],[4577,0.01],[4575,0.02],[4551,0.01],[4550,0.02],[4526,0.01],[4525,0.02],[4505,0.01],[4501,0.01],[4500,2.8478],[4499,0.04],[4483.05,0.1],[4478,0.01],[4451,0.01],[4444,0.01],[4426,0.01],[4404,0.01],[4403,0.01],[4401,0.04],[4400,0.0939],[4399,0.4413],[4381,0.01],[4373,0.01],[4355,0.02],[4330,0.3572],[4327,0.01],[4304,0.01],[4301,0.04],[4299,0.01],[4271,0.01],[4252,0.01],[4237,0.01],[4227,0.01],[4203,0.02],[4202,0.01],[4200,5],[4199,0.1],[4188.72,0.1911],[4184.53,0.2209],[4180.34,0.1728],[4178,2],[4177,0.01],[4176.16,0.1911],[4171.98,0.1718],[4167.81,0.1847],[4163.64,0.168],[4157,0.01],[4155,0.01],[4133,0.01],[4099.62,0.004],[4099.52,0.0036],[4087,0.01],[4080,1],[4061,0.01],[4060,2],[4050,0.0567],[4032.53,0.0462],[4029.44,0.0064],[4029.32,3.0086],[4025.38,3.2333],[4019.7,2.8727],[4019.19,0.0048],[4018.87,0.0206],[4018.76,0.0128],[4018.09,0.0104],[4016.66,0.0463],[4016.65,13.781],[4014.2,2.2424],[4013.55,1.059],[4009.6,1.5],[4008.66,1.699],[4008.63,0.0116],[4008.14,1.927],[4008.03,0.84],[4007.7,0.0105],[4007.3,0.0128],[4006.49,0.0574],[4006.41,0.0574],[4006.37,0.0574],[4006.34,0.0574],[4006.32,0.0472],[4005.77,0.0024],[4005.73,0.0405],[4005.7,0.0104],[4002.58,0.275]],"bids":[[3999.42,0.327],[3999.41,1.2614],[3994.62,0.211],[3994.58,0.275],[3994.03,1.2282],[3993.85,1.8753],[3989.31,0.203],[3989.23,0.599],[3988.14,0.0471],[3987.84,1.5379],[3986.45,0.203],[3986.37,0.757],[3985.55,0.0576],[3983,0.0021],[3982.19,1.5],[3982.18,1.5326],[3973.94,2.4724],[3973.14,15],[3947,0.02],[3946.85,0.0129],[3938.48,0.012],[3933.63,7.5],[3931.03,0.0117],[3928.87,0.0109],[3924.03,0.0021],[3912.86,0.1885],[3908.96,0.1611],[3905.06,0.1854],[3905.04,0.0185],[3901.16,0.2054],[3897.27,0.174],[3893.38,0.1756],[3889.5,0.2199],[3885.62,0.2135],[3884.88,0.0139],[3881.74,0.1992],[3877.87,0.1772],[3876.48,7.5],[3874,0.218],[3870.13,0.2],[3866.27,0.2305],[3862.41,0.1629],[3858.56,0.1778],[3854.71,0.1739],[3853.22,3],[3850.86,0.208],[3847.02,0.2037],[3843.18,0.19],[3839.35,0.1973],[3835.52,0.183],[3831.69,0.1662],[3827.87,0.1846],[3824.05,0.183],[3820.23,0.1644],[3816.42,0.2364],[3812.61,0.165],[3810,78.7401],[3808.81,0.1792],[3805.01,0.1959],[3801.21,0.1659],[3797.42,0.1846],[3793.63,0.1726],[3789.85,0.2069],[3786.07,0.2268],[3782.29,0.1917],[3778.52,0.1835],[3775,0.01],[3774.75,0.1619],[3770.98,0.2044],[3767.22,0.1627],[3765.16,3],[3763.46,0.1934],[3760.9,1.012],[3759.71,0.1743],[3755.96,0.2025],[3752.21,0.2134],[3750,0.01],[3748.47,0.2184],[3744.73,0.1842],[3740.99,0.2363],[3737.26,0.2372],[3733.53,0.2239],[3729.79,0.2222],[3726.06,0.1698],[3725.92,3],[3725,0.01],[3722.33,0.1916],[3722.17,0.0178],[3718.82,0.013],[3718.6,0.1689],[3717.53,0.0308],[3714.88,0.2017],[3713.19,0.0112],[3711.16,0.1783],[3707.44,0.2161],[3703.73,0.2238],[3700.02,0.2206],[3700,0.01],[3696.43,0.259],[3696.31,0.2299],[3692.61,0.1685],[3688.91,0.2179],[3675,0.01],[3650,1.01],[3641,0.01],[3635,0.01],[3625,0.01],[3618.26,0.0235],[3605,0.01],[3600,0.5493],[3573,0.01],[3559.91,0.0165],[3545,0.01],[3544,0.01],[3519,0.01],[3500,0.01],[3475,0.03],[3465,0.01],[3461,0.01],[3454,0.01],[3452.54,0.052],[3447.15,0.0521],[3435.9,0.0112],[3434,0.01],[3420,0.01],[3404,0.01],[3401,0.01],[3400,3],[3391,0.01],[3378,0.01],[3366,0.02],[3351,0.01],[3345,0.01],[3341,0.01],[3340,0.01],[3315,0.02],[3311,0.01],[3305,0.01],[3290,0.01],[3288,0.01],[3270,0.02],[3250,0.02],[3245,0.01],[3244,0.01],[3243,0.01],[3240,0.01],[3222,0.01],[3220,0.01],[3215,0.1],[3200,0.02],[3180,0.01],[3177,0.01],[3160,0.01],[3151,0.01],[3144,0.0095],[3140,0.01],[3050,0.0292],[3000,0.4],[2860,0.1419],[2857.6,0.9265],[2750,0.3],[2749.35,125],[2669.28,125],[2591.54,125],[2516.06,125],[2440.57,125],[2310.91,0.8],[2298,0.1],[2250.91,0.8821],[2123.19,0.4289],[2005,0.1],[1810.91,1.1344],[1500,0.1],[1320,0.1],[1315,0.5],[1310.91,1.567],[1200,0.015],[1111,0.0011],[1025,1],[900,1.432],[816,1.105],[766,1.359],[653,0.05],[583,0.09],[577,0.13],[573,0.17],[567,0.21],[563,0.19],[550,2],[388,0.01],[305.75,0.01],[303.75,0.01],[301.75,0.015],[160,3.5],[100,0.01],[24,0.12],[5,0.026],[1.5,729],[1.38,116.2888],[1,1634.5132]]}'